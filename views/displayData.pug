doctype html
html
  head
    title QR Code Generator
    style.
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f0f0f0;
      }
      header {
        background-color: #333;
        color: white;
        padding: 10px 0;
        text-align: center;
      }
      main {
        margin: 15px;
        display: flex; 
        justify-content: space-between; 
      section {
        background-color: white;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 5px;
        width: 30%;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2); 
      }
      form {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 10px; 
      }
      input, button { 
        padding: 15px;
        font-size: 18px;
      }
      button {
        background-color: #008CBA;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
      }
      button:hover {
        background-color: #007B9A;
      }
  body
    header
      h1 QR Code Generator
    main
      section
        h2 Description of the program
        h3 Database Integration 
        p The MongoDB is used to save all the data about QR-codes
        h3 QRCode model
        p The QRCode entity represents a QR code generated by the user. It has the following properties:
        ul
          li name: A string that represents the name of the QR code.
          li link: A string that represents the data encoded in the QR code.
          li important: A boolean that indicates whether the QR code is marked as important.
          li image: A string that represents the QR code image in Data URL format.
        h3 Endpoints
        p Here are some of the endpoints that interact with these entities:
        ul
          li POST /generate-qr: Generates a new QR code. The request body should include the name, link, and important properties.
          li GET /qrcodes: Returns a list of all QR codes.
          li GET /display-qr/:id: Returns a specific QR code.
          li POST /update-qr/:id: Updates a specific QR code. The request body should include the new name and important properties.
          li DELETE /delete-qr/:id: Deletes a specific QR code.
      section
        h2 Create a QR-code
        form(action="/generate-qr" method="POST")
          label(for="name") Enter name for QR code:
          input#name(type="text" name="name")
          label(for="data") Enter data for QR code:
          input#data(type="text" name="data")
          label(for="important") Mark as important:
          input#important(type="checkbox" name="important")
          button(type="submit") Generate QR code
      section
        h2 Archive of QR-codes
        p Here you can view all the QR codes that have been generated.
        button(onclick="location.href='/qrcodes'") View QR Code Archive
